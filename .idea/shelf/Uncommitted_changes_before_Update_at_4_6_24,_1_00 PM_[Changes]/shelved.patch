Index: GameUI.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by Nicholas Kamra on 3/12/24.\n//\n\n#include \"GameUI.h\"\n#include \"MapCreator.h\"\n#\n#include \"Dice.h\"\n\n#ifdef __APPLE__\n\nnamespace fs = std::__fs::filesystem;\n\n#else\n\nnamespace fs = std::filesystem;\n\n#endif\n\nvoid save(){\n\n}\n\nstd::unordered_set<char> acceptableCharacters = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n                                    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4',\n                                    '5', '6', '7', '8', '9', '0', 'A', 'B', 'C', 'D', 'E', 'F',\n                                    'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n                                    'V', 'W', 'X', 'Y', 'Z', '@', '#', '$', '%', '^', '&', ',', '.', '!', '*',\n                                    '(', ')', '-', '_', '+', '=', ' '};\n\nstd::string normalizeCSVOutput(std::string CSVInput){\n\n    std::string returnString = \"\";\n\n    for(int i = 0; i < CSVInput.length(); i++){\n        char currentChar = CSVInput[i];\n        for(char acceptChar : ::acceptableCharacters){\n            if(currentChar == acceptChar){\n                returnString.push_back(currentChar);\n                break;\n            }\n        }\n    }\n    return returnString;\n}\n\nvoid creationTestsUI(){\n\n    bool play = true;\n\n    while(play) {\n\n        clearConsole();\n        std::cout << \"D&D Testing\" << std::endl;\n        std::cout << \"-----------\" << std::endl;\n        std::cout << \"\" << std::endl;\n        std::cout << \"Press '1' and 'Enter' for Dice creation\" << std::endl;\n        std::cout << \"Press '2' and 'Enter' for Character creation\" << std::endl;\n        std::cout << \"Press '3' and 'Enter' for Map creation\" << std::endl;\n        std::cout << \"Press '4' and 'Enter' for Item creation\" << std::endl;\n        std::cout << \"Press '5' and 'Enter' for unsaved game trial\" << std::endl;\n        std::cout << \"Press '6' and 'Enter' to exit the program\" << std::endl;\n\n        int userSelection = 0;\n\n        for (;;) {\n            try {\n                std::cin >> userSelection;\n                if (cin.fail()) {\n                    std::cin.clear();\n                    std::cin.ignore();\n                    throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n                    continue;\n                }\n                break;\n            } catch (...) {\n                std::cin.clear();\n                std::cin.ignore();\n            }\n        }\n\n        switch (userSelection) {\n            case 1: {\n\n                Dice newDice;\n\n                int rollVal = newDice.diceMenu();\n\n                cout << rollVal << \"\\n\";\n\n                pause(5000);\n\n                break;\n            }\n            case 2: {\n                Character *newCharacter = new Character();\n                newCharacter->createCharacterInterface();\n                delete newCharacter;\n                newCharacter = nullptr;\n                break;\n            }\n            case 3: {\n            \n            \tMap newMap;\n              newMap.mapMenuDisplay();\n                break;\n            }\n            case 4: {\n                Backpack *backpack = new Backpack(4);\n                backpack->printItem();\n\n                pause(5000);\n                break;\n            }\n            case 5:{\n                gameLoopExampleForDemo();\n            }\n            case 6:{\n                return;\n            }\n            default: {\n                std::cout << \"---Warning: Invalid option---\" << std::endl;\n                break;\n            }\n        }\n    }\n}\n\nvoid gameLoopExampleForDemo(){\n    bool play = true;\n\n\n    Character * characterForCreation = new Character();\n    std::vector<Character *> characterVec;\n    characterForCreation->createNewCharacter(characterVec);\n\n    Character * newCharacter = characterVec.at(0);\n    Observer * newObserver = new CharacterObserver(newCharacter);\n    newCharacter->attach(newObserver);\n\n    Map* newMap;\n\n    int height;\n    int width;\n\n    std::cout << \"Create a map\" << std::endl;\n    std::cout << \"------------\" << std::endl;\n    std::cout << \"\" << std::endl;\n\n    std::cout << \"Enter a map height: \" << std::endl;\n    for (;;) {\n        try {\n            std::cin >> height;\n            if (cin.fail()) {\n                std::cin.clear();\n                std::cin.ignore();\n                throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n            }\n            break;\n        } catch (...) {\n            std::cin.clear();\n            std::cin.ignore();\n        }\n    }\n\n    std::cout << \"Enter a map width: \" << std::endl;\n    for (;;) {\n        try {\n            std::cin >> width;\n            if (cin.fail()) {\n                std::cin.clear();\n                std::cin.ignore();\n                throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n            }\n            break;\n        } catch (...) {\n            std::cin.clear();\n            std::cin.ignore();\n        }\n    }\n\n    newMap = new Map(height, width);\n    Observer * mapObserver = new MapObserver(newMap);\n    newMap->attach(mapObserver);\n\n    newMap->loadCharactersIntoMap(characterVec);\n    loadEnemiesIntoMap(newMap);\n\n    while(play){\n\n        newMap->notify();\n        newCharacter->notify();\n\n        // return 'E' for end and 'S' to stop game and 'X' for error and 'C' continue\n        char selection;\n        Observer * gameLoggerObserver = new GameLoggerObserver();\n        selection = getUserInput(newCharacter, newMap, gameLoggerObserver);\n        clearConsole();\n        if(selection == 'S'){\n            delete newMap;\n            play = false;\n        }else{\n            play = true;\n        }\n    }\n\n}\n// TODO: this has been updated ------------------------\nvoid gameLoopLoadingCampaign(std::vector<std::string> mapNamesInCampaign, std::vector<Map *> ptrVectorOfAllMaps, std::vector<Character *> ptrVectorOfAllCharacters){\n\n    Game * currGame = new Game();\n    Observer * gameLoggerObserver = new GameLoggerObserver();\n    GameLoggerObserver * gameLoggerObserverDowncasted = dynamic_cast<GameLoggerObserver *>(gameLoggerObserver);\n\n    gameLoggerObserverDowncasted->log(\"New game started.\", currGame); // gameLogger Update\n\n    clearConsole();\n\n    bool play = true;\n\n    int currMapIndex = 0;\n\n    for(Map * map : ptrVectorOfAllMaps){\n        Map * newMap = map;\n        Observer * mapObserver = new MapObserver(newMap);\n        newMap->attach(mapObserver);\n        newMap->attach(gameLoggerObserver);\n    }\n\n    for(Character * character : ptrVectorOfAllCharacters){\n        Character * newCharacter = character;\n        Observer * characterObserver = new CharacterObserver(newCharacter);\n        newCharacter->attach(characterObserver);\n        newCharacter->attach(gameLoggerObserver);\n    }\n\n    Map * currMap = ptrVectorOfAllMaps.at(0);\n    gameLoggerObserverDowncasted->log(\"New map is loading.\", currMap); // gameLogger Update\n    fillEmptyChestsWithItems(currMap);\n    gameLoggerObserverDowncasted->log(\"Populating chests with items.\", currMap); // gameLoggerUpdate\n    Character * currCharacter = ptrVectorOfAllCharacters.at(0);\n\n    currMap->loadCharactersIntoMap(ptrVectorOfAllCharacters);\n    loadEnemiesIntoMap(currMap);\n    gameLoggerObserverDowncasted->log(\"Characters loaded into map.\", currMap); // gameLogger Update\n\n    gameLoggerObserverDowncasted->log(\"It is \" + currCharacter->getName() + \" turn.\", currCharacter); // gameLogger Update\n    currMap->notify();\n\n    while(play){\n\n        // return 'E' for end and 'S' to stop game and 'X' for error and 'C' continue\n        gameLoggerObserverDowncasted->log(\"It is \" + currCharacter->getName() + \" turn.\", currCharacter); // gameLogger Update\n        char selection;\n\n        selection = getUserInput(currCharacter, currMap, gameLoggerObserver);\n\n        clearConsole();\n\n        currMap->notify();\n        currCharacter->notify();\n\n        gameLoggerObserverDowncasted->log(\"End of \" + currCharacter->getName() + \" turn.\", currCharacter); // gameLogger Update\n\n        if(selection == 'S'){\n            std::ofstream gameLogFile(\"GameLog.txt\");\n            gameLogFile << \"\";\n            play = false;\n        }else if(selection == 'E'){\n                currMapIndex++;\n\n                if(ptrVectorOfAllMaps.size() - 1 < currMapIndex){\n                    currMapIndex--;\n                    clearConsole();\n                    std::cout << \"Congratulations! You have made it to the end of the campaign.\" << std::endl;\n                    pause(5000);\n                    clearConsole();\n                    std::cout << \"...Exiting to main menu...\" << std::endl;\n                    pause(1000);\n                    clearConsole();\n                    play = false;\n                }\n                currMap = ptrVectorOfAllMaps.at(currMapIndex);\n                gameLoggerObserverDowncasted->log(\"New map is loading.\", currMap); // gameLogger Update\n                fillEmptyChestsWithItems(currMap);\n                gameLoggerObserverDowncasted->log(\"Populating chests with items.\", currMap); // gameLogger Update\n                currMap->loadCharactersIntoMap(ptrVectorOfAllCharacters);\n                loadEnemiesIntoMap(currMap);\n                gameLoggerObserverDowncasted->log(\"Characters loaded into map.\", currMap); // gameLogger Update\n\n        }else{\n                continue;\n\n        }\n    }\n}\n\nstd::vector<std::string> printFilesInDirectory(const std::string & path){\n\n    std::vector<std::string> campaigns;\n\n    fs::path currentPath = fs::current_path();\n    currentPath /= path;\n\n\n    if(fs::exists(currentPath) && fs::is_directory(currentPath)) {\n\n        for (const auto &entry: fs::directory_iterator(currentPath)) {\n            if(entry.path().filename() == \".DS_Store\"){\n                continue;\n            }else{\n                std::cout << entry.path().filename() << std::endl;\n                campaigns.push_back(entry.path().filename());\n            }\n        }\n\n    }else{\n        std::cout << \"Directory not found\" << std::endl;\n    }\n    std::cout << \"\" << std::endl;\n    return campaigns;\n}\n\nstd::vector<std::string> getMapsInCampaignCSV(fs::path & campaignCSVFilePath){\n\n    std::ifstream file(campaignCSVFilePath);\n    std::vector<std::string> mapNamesInCampaign;\n\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file!\" << std::endl;\n        return mapNamesInCampaign;\n    }\n\n    std::string line;\n    std::cin.clear();\n    std::cin.ignore();\n    while (std::getline(file, line)) {\n\n        mapNamesInCampaign.push_back(normalizeCSVOutput(line));\n\n    }\n\n    file.close();\n\n    return mapNamesInCampaign;\n}\n\nstd::vector<std::vector<std::string> > getMapInformationInMapDirectory(fs::path & mapDirectoryPath){\n\n\n    std::ifstream file(mapDirectoryPath);\n    std::vector<std::vector<std::string> > mapDataVector;\n\n\n\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file\" << std::endl;\n        return mapDataVector;\n    }\n\n    std::string line;\n    std::cin.clear();\n    std::cin.ignore();\n\n    while (std::getline(file, line)) {\n        std::vector<std::string> newVec;\n        // must delimit line and push_back each string into newVec for each line\n        std::istringstream iss(line);\n        std::string stringToPushBack;\n\n        while (std::getline(iss, stringToPushBack, ',')) {\n            newVec.push_back(normalizeCSVOutput(stringToPushBack));\n        }\n\n        mapDataVector.push_back(newVec);\n\n    }\n\n    file.close();\n\n    return mapDataVector;\n}\n\nstd::vector<std::vector<std::string> > getCharacterInformationInCharacterDirectory(fs::path & characterDirectoryPath){\n    std::vector<std::string> allCharactersVector;\n    std::vector<std::vector<std::string> > allCharactersVectorWithData;\n\n    if(fs::exists(characterDirectoryPath) && fs::is_directory(characterDirectoryPath)) {\n\n        for (const auto &entry: fs::directory_iterator(characterDirectoryPath)) {\n            if(entry.path().filename() == \".DS_Store\"){\n                continue;\n            }else{\n                allCharactersVector.push_back(normalizeCSVOutput(entry.path().filename()));\n            }\n        }\n\n    }else{\n        std::cout << \"Directory not found\" << std::endl;\n    }\n\n    for(std::string characters : allCharactersVector){\n\n        fs::path characterCSVPath = characterDirectoryPath;\n        characterCSVPath /= characters;\n\n        std::ifstream file(characterCSVPath);\n        std::vector<std::string> characterDataInCSV;\n\n        if (!file.is_open()) {\n            std::cerr << \"Error opening file!\" << std::endl;\n            return allCharactersVectorWithData;\n        }\n\n        std::string line;\n        std::cin.clear();\n        std::cin.ignore();\n        while (std::getline(file, line)) {\n\n            characterDataInCSV.push_back(normalizeCSVOutput(line));\n\n        }\n\n        file.close();\n        allCharactersVectorWithData.push_back(characterDataInCSV);\n\n    }\n\n    return allCharactersVectorWithData;\n\n}\n\nbool campaignSelectionUserInput(std::vector<std::string> & campaigns, const std::string & campaignDirectoryToAppend, std::vector<std::string> & allMapNamesInCampaign, std::vector<Map *> & ptrVectorOfAllMaps, std::vector<Character *> & ptrVectorOfAllCharacters){\n\n    fs::path currentPath = fs::current_path();\n    currentPath /= campaignDirectoryToAppend;\n\n    std::cout << \"Enter campaign name (just include the name without quotations) to exit enter '/': \";\n\n    std::string campaignSelection;\n\n    // we loop until we get valid campaign or the user wants to exit this selection\n    for(;;) {\n\n        std::cin >> campaignSelection;\n\n        if(campaignSelection == \"/\"){\n            return false;\n        }\n\n        bool campaignExists = false;\n\n        fs::path campaignDirectory;\n\n\n        for (std::string campaign: campaigns) {\n            if (campaign == campaignSelection) {\n                currentPath /= campaignSelection;\n                campaignDirectory = currentPath; // This is the directory path inside a campaign\n                campaignExists = true;\n            }\n        }\n\n\n        if (campaignExists) {\n            if (fs::exists(currentPath) && fs::is_directory(currentPath)) {\n\n\n                // Creation for vector of maps in campaign\n                std::vector<std::string> mapNamesInCampaign;\n                fs::path campaignCSVFilePath = campaignDirectory;\n                campaignCSVFilePath /= \"campaign.csv\";\n                mapNamesInCampaign = getMapsInCampaignCSV(campaignCSVFilePath);\n                allMapNamesInCampaign = mapNamesInCampaign; // parameter changed\n\n                // Creation for vector of all maps with map data\n                std::vector<std::vector<std::vector<std::string> > > vectorOfAllMaps;\n                fs::path mapDirectoryPath = campaignDirectory;\n                mapDirectoryPath /= \"Maps\";\n\n                std::vector<std::vector<std::vector<std::string> > > allMapsInCampaignDataVector;\n\n                for (std::string campaign: mapNamesInCampaign) {\n\n                    std::string currentCampaign = campaign;\n                    fs::path currentMapDirectory = mapDirectoryPath;\n                    currentMapDirectory /= currentCampaign;\n                    std::vector<std::vector<std::string> > newMapDataVector = getMapInformationInMapDirectory(\n                            currentMapDirectory);\n                    allMapsInCampaignDataVector.push_back(newMapDataVector);\n                }\n\n                for (int i = 0; i < allMapsInCampaignDataVector.size(); i++) {\n                    Map *newMap = new Map(allMapsInCampaignDataVector.at(i));\n                    ptrVectorOfAllMaps.push_back(newMap);\n                }\n\n                // Creation for vector of all characters with character data\n                std::vector<std::vector<std::string> > vectorOfAllCharacters;\n\n                fs::path characterDirectoryPath = campaignDirectory;\n                characterDirectoryPath /= \"Characters\";\n\n                vectorOfAllCharacters = getCharacterInformationInCharacterDirectory(characterDirectoryPath);\n\n                for (int i = 0; i < vectorOfAllCharacters.size(); i++) {\n                    ptrVectorOfAllCharacters.push_back(\n                            buildCharacterFromSaveFile(vectorOfAllCharacters.at(i))); // changing parameter\n                }\n                return true;\n\n            } else {\n                std::cout << \"Error: Failure to load - campaign does not exist\" << std::endl;\n                continue;\n            }\n        } else {\n            std::cout << \"Error: Campaign does not exist\" << std::endl;\n            std::cout << \"\" << std::endl;\n            continue;\n        }\n    }\n}\n\nvoid displayCampaignSelectionList(){\n\n    clearConsole();\n\n    const std::string campaignDirectory = \"Campaigns\";\n\n    std::cout << \"Available campaigns\" << std::endl;\n    std::cout << \"-------------------\" << std::endl;\n    std::cout << \"\" << std::endl;\n\n    std::vector<std::string> campaigns;\n\n    campaigns = printFilesInDirectory(campaignDirectory);\n\n    std::cout << \"Enter '1' to enter a campaign selection\" << std::endl;\n    std::cout << \"Enter '2' to go back\" << std::endl;\n\n    char userSelection;\n\n    for (;;) {\n        try {\n            std::cin >> userSelection;\n            if (cin.fail()) {\n                std::cin.clear();\n                std::cin.ignore();\n                throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n            } else if (userSelection != '1' && userSelection != '2') {\n                continue;\n            }\n            break;\n        } catch (...) {\n            std::cin.clear();\n            std::cin.ignore();\n        }\n    }\n    switch(userSelection){\n        case '1':{\n            std::vector<std::string> mapNamesInCampaign;\n            std::vector<Map *> ptrVectorOfAllMaps;\n            std::vector<Character *> vectorOfAllCharacters;\n            bool goodInput = campaignSelectionUserInput(campaigns, campaignDirectory, mapNamesInCampaign, ptrVectorOfAllMaps, vectorOfAllCharacters);\n            if(goodInput) {\n                gameLoopLoadingCampaign(mapNamesInCampaign, ptrVectorOfAllMaps, vectorOfAllCharacters);\n            }else{\n\n            }\n            break;\n        }\n        case '2':\n        {\n            return;\n        }\n        default:\n            break;\n    }\n}\n\nvoid displayLoadCampaignMenu(){\n\n    for(;;) {\n        std::cin.clear();\n        std::cin.ignore();\n        clearConsole();\n\n        std::cout << \"Load Campaign\" << std::endl;\n        std::cout << \"-------------\" << std::endl;\n        std::cout << \"\" << std::endl;\n        std::cout << \"Enter '1' to list all campaigns\" << std::endl;\n        std::cout << \"Enter '2' to go back\" << std::endl;\n        std::cout << \"\" << std::endl;\n\n        char userSelection;\n\n        for (;;) {\n            try {\n                std::cin >> userSelection;\n                if (cin.fail()) {\n                    std::cin.clear();\n                    std::cin.ignore();\n                    throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n                } else if (userSelection != '1' && userSelection != '2') {\n                    continue;\n                }\n                break;\n            } catch (...) {\n                std::cin.clear();\n                std::cin.ignore();\n            }\n        }\n        switch(userSelection){\n            case '1':{\n                displayCampaignSelectionList();\n                break;\n            }\n            case '2':\n            {\n                return;\n            }\n            default:\n                break;\n        }\n    }\n}\n\nvoid displayCampaignMenu(){\n\n\n    for(;;) {\n\n        clearConsole();\n\n        std::cout << \"Campaign Menu\" << std::endl;\n        std::cout << \"-------------\" << std::endl;\n        std::cout << \"\" << std::endl;\n        std::cout << \"Enter '1' to load a campaign\" << std::endl;\n        std::cout << \"Enter '2' to create a campaign\" << std::endl;\n        std::cout << \"Enter '3' to go back\" << std::endl;\n\n        char userSelection;\n\n        for (;;) {\n            try {\n                std::cin >> userSelection;\n                if (cin.fail()) {\n                    std::cin.clear();\n                    std::cin.ignore();\n                    throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n                } else if (userSelection != '1' && userSelection != '2' && userSelection != '3') {\n                    continue;\n                }\n                break;\n            } catch (...) {\n                std::cin.clear();\n                std::cin.ignore();\n            }\n        }\n        switch (userSelection) {\n            case '1': {\n                displayLoadCampaignMenu();\n                break;\n            }\n            case '2': {\n                createNewCampaign();\n                break;\n            }\n            case '3': {\n                return;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n}\n\nvoid displayStartingMenu(){\n\n    for(;;) {\n\n        clearConsole();\n\n        std::cout << \"Dungeons and Dragons\" << std::endl;\n        std::cout << \"-------------------\" << std::endl;\n        std::cout << \"\" << std::endl;\n        std::cout << \"Enter '1' to start game\" << std::endl;\n        std::cout << \"Enter '2' to exit game\" << std::endl;\n        std::cout << \"Enter '3' to enter creation testing\" << std::endl;\n        std::cout << \"Enter '4' to enter NPC testing\" << std::endl;\n\n        char userSelection;\n\n        for (;;) {\n            try {\n                std::cin >> userSelection;\n                if (cin.fail()) {\n                    std::cin.clear();\n                    std::cin.ignore();\n                    throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n                    continue;\n                } else if (userSelection != '1' && userSelection != '2' && userSelection != '3' && userSelection != '4') {\n                    continue;\n                }\n                break;\n            } catch (...) {\n                std::cin.clear();\n                std::cin.ignore();\n            }\n        }\n\n        if (userSelection == '1') {\n\n            //gameLoop();\n            displayCampaignMenu();\n\n        } else if(userSelection == '2') {\n        \t\tclearConsole();\n            return;\n        }else if (userSelection == '3'){\n            creationTestsUI();\n        } else if (userSelection == '4') {\n        \t\n        \tstd::string userInput;\n        \t\n        \tclearConsole();\n        \tcout << \"You are entering the NPC testing zone. Would you like to proceed?\\nOption ('y' for yes, any key for no): \\n\\n\";\n        \t\n        \tcin >> userInput;\n        \t\n        \tif(userInput == \"y\") {\n        \t\n\t\t      \tEmojiMap newMap = EmojiMap(80,80);\n\t\t\n\t\t\t\t\t\tint npcY = 0;\n\t\t\t\t\t\tint npcX = 20;\n\t\t\t\t\t\tint npcState = 6;\n\t\t\t\t\t\t\n\t\t\t\t\t\tnewMap.setNumberAtCell(npcState, npcY, npcX);\n\t\t\t\t\t\t\n\t\t\t\t\t\tint** NPCList = new int*[1];\n\t\t\t\t\t\tNPCList[0] = new int[3];\n\t\t\t\t\t\t\n\t\t\t\t\t\tNPCList[0][0] = npcY;\n\t\t\t\t\t\tNPCList[0][1] = npcX;\n\t\t\t\t\t\tNPCList[0][2] = npcState;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tnewMap.runGame(NPCList, 1, 0);\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelete[] NPCList[0];\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelete[] NPCList;\n        \t\n        \t}\n        \t\n        }\n    }\n}\n\nvoid funcForCSV(){\n\n    std::vector<std::vector<std::string>> vecForCSV;\n\n    Map * newMap = new Map(60, 60);\n    vecForCSV = mapToVectorForCSV(newMap);\n\n    for(int i = 0; i < vecForCSV.size();i++){\n        for(int j = 0; j < vecForCSV.at(i).size(); j++){\n            std::cout << vecForCSV.at(i).at(j) << std::endl;\n        }\n    }\n\n}\nvoid pauseMenuUnsubscribe(GameLoggerObserver * gameLoggerObserver){\n\n    for(;;) {\n        clearConsole();\n\n        std::cout << \"GameLogger Settings\" << std::endl;\n        std::cout << \"-------------------\" << std::endl;\n        std::cout << std::endl;\n        std::cout << \"Press '1' to toggle the 'Game' log: \";\n        bool gameExist = gameLoggerObserver->existsInSubscriberList(\"Game\");\n        if(gameExist){\n            std::cout << \"ON\" << std::endl;\n        }else{\n            std::cout << \"OFF\" << std::endl;\n        }\n        std::cout << \"Press '2' to toggle the 'Character' log: \";\n        bool characterExist = gameLoggerObserver->existsInSubscriberList(\"Character\");\n        if(characterExist){\n            std::cout << \"ON\" << std::endl;\n        }else{\n            std::cout << \"OFF\" << std::endl;\n        }\n        std::cout << \"Press '3' to toggle the 'Map' log: \";\n        bool mapExist = gameLoggerObserver->existsInSubscriberList(\"Map\");\n        if(mapExist){\n            std::cout << \"ON\" << std::endl;\n        }else{\n            std::cout << \"OFF\" << std::endl;\n        }\n        std::cout << \"Press '4' to toggle the 'Dice' log: \";\n        bool diceExist = gameLoggerObserver->existsInSubscriberList(\"Dice\");\n        if(diceExist){\n            std::cout << \"ON\" << std::endl;\n        }else{\n            std::cout << \"OFF\" << std::endl;\n        }\n        std::cout << \"Press '5' to exit\" << std::endl;\n\n        char playerInputChar;\n\n        for (;;) {\n            try {\n                std::cin >> playerInputChar;\n                if (cin.fail()) {\n                    std::cin.clear();\n                    std::cin.ignore();\n                    throw std::runtime_error(\"Invalid input. Please enter a character.\");\n                    continue;\n                } else if (playerInputChar != '1' && playerInputChar != '2' && playerInputChar != '3'\n                           && playerInputChar != '4' && playerInputChar != '5') {\n                    std::cin.clear();\n                    std::cin.ignore();\n                    continue;\n                }\n                break;\n            } catch (...) {\n                std::cin.clear();\n                std::cin.ignore();\n            }\n        }\n\n        switch (playerInputChar) {\n            case '1': {\n                gameLoggerObserver->changeSubscription(\"Game\");\n                break;\n            }\n            case '2': {\n                gameLoggerObserver->changeSubscription(\"Character\");\n                break;\n            }\n            case '3': {\n                gameLoggerObserver->changeSubscription(\"Map\");\n                break;\n            }\n            case '4': {\n                gameLoggerObserver->changeSubscription(\"Dice\");\n                break;\n            }\n            case '5': {\n                return;\n            }\n            default: {\n                break;\n            }\n        }\n    }\n}\nbool pauseMenuUIandExitGame(GameLoggerObserver * gameLoggerObserver, Character * player){\n\n    clearConsole();\n\n    std::cout << \"Pause Menu\" << std::endl;\n    std::cout << \"----------\" << std::endl;\n    std::cout << \"\" << std::endl;\n    std::cout << \"Enter '1' to unpause\" << std::endl;\n    std::cout << \"Enter '2' to exit game\" << std::endl;\n    std::cout << \"Enter '3' to change log information\" << std::endl;\n    std::cout << \"Enter '4' to see inventory\" << std::endl;\n\n    char playerInputChar;\n\n    for (;;){\n        try {\n            std::cin >> playerInputChar;\n            if(cin.fail()) {\n                std::cin.clear();\n                std::cin.ignore();\n                throw std::runtime_error(\"Invalid input. Please enter a character.\");\n                continue;\n            }else if(playerInputChar != '1' && playerInputChar != '2' && playerInputChar != '3' && playerInputChar != '4'){\n                std::cin.clear();\n                std::cin.ignore();\n                continue;\n            }\n            break;\n        } catch (...) {\n            std::cin.clear();\n            std::cin.ignore();\n        }\n    }\n    switch(playerInputChar){\n        case '1':{\n            return false;\n        }\n        case '2':{\n            return true;\n        }\n        case '3':{\n            pauseMenuUnsubscribe(gameLoggerObserver);\n            return false;\n        }\n        case '4':{\n            // showInventory(); TODO: must implement this ----------------------\n            return false;\n        }\n        default:{\n            break;\n        }\n    }\n    return false;\n}\nchar getUserInput(Character * player, Map * currMap, Observer * gameLoggerObserver){ // return 'E' for end and 'S' to stop game and 'X' for error and 'C' continue\n\n    GameLoggerObserver * gameLoggerObserverCasted = (GameLoggerObserver *)gameLoggerObserver;\n\n    std::cout << \"Please enter a direction to move ('w', 'a', 's', 'd') or pause ('p'):\";\n    std::cout << \"\" << std::endl;\n    char playerInputChar;\n\n    for (;;){\n        try {\n            std::cin >> playerInputChar;\n            if(cin.fail()) {\n                std::cin.clear();\n                std::cin.ignore();\n                throw std::runtime_error(\"Invalid input. Please enter a character.\");\n                continue;\n            }else if(playerInputChar != 'w' && playerInputChar != 'a' && playerInputChar != 's'\n                     && playerInputChar != 'd' && playerInputChar != 'p'){\n                std::cin.clear();\n                std::cin.ignore();\n                continue;\n            }\n            break;\n        } catch (...) {\n            std::cin.clear();\n            std::cin.ignore();\n        }\n    }\n\n    State * stateToCheck;\n    int movementX = 0;\n    int movementY = 0;\n\n    switch(playerInputChar){\n        case 'w':{\n            // must first check if out of bounds\n            movementX = player->x;\n            movementY = player->y - 1;\n            try {\n                stateToCheck = currMap->getStateOfCell(movementX, movementY);\n\n                // TODO: testing this here -------------------------------\n                std::string toLog = player->getName() + \" has moved up.\";\n                gameLoggerObserverCasted->log(toLog, player);\n            }catch(...){\n                return 'X';\n            }\n            break;\n        }\n        case 'a':{\n            // must first check if out of bounds\n            movementX = player->x - 1;\n            movementY = player->y;\n            try {\n                stateToCheck = currMap->getStateOfCell(movementX, movementY);\n\n                // TODO: testing this here -------------------------------\n                std::string toLog = player->getName() + \" has moved left.\";\n                gameLoggerObserverCasted->log(toLog, player);\n            }catch(...){\n                return 'X';\n            }\n            break;\n        }\n        case 's':{\n            // must first check if out of bounds\n            movementX = player->x;\n            movementY = player->y + 1;\n            try {\n                stateToCheck = currMap->getStateOfCell(movementX, movementY);\n\n                // TODO: testing this here -------------------------------\n                std::string toLog = player->getName() + \" has moved down.\";\n                gameLoggerObserverCasted->log(toLog, player);\n            }catch(...){\n                return 'X';\n            }\n            break;\n        }\n        case 'd':{\n            // must first check if out of bounds\n            movementX = player->x + 1;\n            movementY = player->y;\n            try {\n                stateToCheck = currMap->getStateOfCell(movementX, movementY);\n\n                // TODO: testing this here -------------------------------\n                std::string toLog = player->getName() + \" has moved right.\";\n                gameLoggerObserverCasted->log(toLog, player);\n            }catch(...){\n                return 'X';\n            }\n            break;\n        }\n        case 'p':{\n            stateToCheck = nullptr;\n            bool exitGame;\n            exitGame = pauseMenuUIandExitGame(gameLoggerObserverCasted, player);\n            if(exitGame){\n                return 'S';\n            }else{\n                return 'C';\n            }\n        }\n        default: {\n            stateToCheck = nullptr;\n            break;\n        }\n    }\n    if(stateToCheck == nullptr){\n        return 'X';\n    }\n\n    switch(stateToCheck->letter){\n        case '.':{\n            currMap->map.at(player->y).at(player->x)->characterInSpot = nullptr;\n            player->x = movementX;\n            player->y = movementY;\n            currMap->map.at(player->y).at(player->x)->characterInSpot = player;\n            break;\n        }\n        case 'X':{\n            std::cout << \"--- A wall obstructs your way. ---\" << std::endl;\n            // TODO: testing this here -------------------------------\n            std::string toLog = player->getName() + \" has bumped into a wall.\";\n            gameLoggerObserverCasted->log(toLog, player);\n            break;\n        }\n        case 'D':{\n            currMap->map.at(player->y).at(player->x)->characterInSpot = nullptr;\n            player->x = movementX;\n            player->y = movementY;\n            currMap->map.at(player->y).at(player->x)->characterInSpot = player;\n            // TODO: testing this here -------------------------------\n            std::string toLog = player->getName() + \" has opened a door.\";\n            gameLoggerObserverCasted->log(toLog, player);\n            break;\n        }\n        case 'S':{\n            currMap->map.at(player->y).at(player->x)->characterInSpot = nullptr;\n            player->x = movementX;\n            player->y = movementY;\n            currMap->map.at(player->y).at(player->x)->characterInSpot = player;\n            break;\n        }\n        case 'E':{\n\n            return 'E';\n        }\n        case 'C':{\n            std::cout << \"--- A chest is before you... open it? ('y' or 'n'):\" << std::endl;\n            std::cout << \"\" << std::endl;\n            char openChestDecision;\n\n            for (;;){\n                try {\n                    std::cin >> openChestDecision;\n                    if(cin.fail()) {\n                        std::cin.clear();\n                        std::cin.ignore();\n                        throw std::runtime_error(\"Invalid input. Please enter a character.\");\n                        continue;\n                    }else if(openChestDecision != 'n' && openChestDecision != 'y'){\n                        std::cin.clear();\n                        std::cin.ignore();\n                        continue;\n                    }\n                    break;\n                } catch (...) {\n                    std::cin.clear();\n                    std::cin.ignore();\n                }\n            }\n\n            if(openChestDecision == 'y'){\n                // TODO: testing this here -------------------------------\n                std::string toLog = player->getName() + \" has opened a chest.\";\n                gameLoggerObserverCasted->log(toLog, player);\n                std::cout << \"--- Chest Contents ---\" << std::endl;\n                std::cout << \"\" << std::endl;\n                TreasureChest * newChest;\n                newChest = (TreasureChest *)currMap->map.at(movementY).at(movementX)->state;\n                std::vector<Item> itemVector;\n                itemVector = newChest->getContents();\n                // TODO: this will handle if the player wants to obtain the items within the chest\n                if(itemVector.empty()){\n                    std::cout << \"The chest is empty\" << std::endl;\n                    pause(2000);\n                }else{\n                    for(int i = 0; i < itemVector.size(); i++){\n                        std::cout << \"inside chest\" << std::endl;\n                        std::cout << \"\" << std::endl;\n                    }\n                }\n                break;\n            }else{\n                break;\n            }\n        }\n        default:{\n            break;\n        }\n    }\n\n    stateToCheck = nullptr;\n    return 'C';\n}\n\n//shai's func\nvoid createNewCampaign(){\n    bool MadeCharacter = false, MadeMaps = false;\n    int input;\n    std::cin.clear();\n    std::cin.ignore();\n    while(!MadeMaps || !MadeCharacter){\n        clearConsole();\n        std::cout << \"\\n\\nWould you like to:\";\n        if(!MadeCharacter){\n            std::cout << \"\\n1. Create a character\";\n        }\n        if(!MadeMaps){\n            std::cout << \"\\n2. Create new Maps\";\n        }\n        std::cout << \"\\n\\nPlease input one of the numbers above: \";\n        for (;;) {\n            try {\n                std::cin >> input;\n                if (cin.fail()) {\n                    std::cin.clear();\n                    std::cin.ignore();\n                    throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n                    continue;\n                } else if (input != 1 && input != 2) {\n                    continue;\n                } else{\n                    break;\n                }\n                \n            } catch (...) {\n                std::cin.clear();\n                std::cin.ignore();\n            }\n        }\n        if(input == 1){\n            MadeCharacter = true;\n            std::vector<Character*> listOfCharacters; // this is the list that contains the character\n            Character *newCharacter = new Character();\n            newCharacter->createNewCharacter(listOfCharacters);\n        } else { //input == 2\n            MadeMaps = true;\n            vector<Map*> listOfMaps;\n            bool keepMakingMaps = true, firstTime = true;\n            int width, height;\n            while(keepMakingMaps){\n                std::cout << \"\\nPlease input the size of the width for the map: \";\n                for (;;) {\n                    try {\n                        std::cin >> width;\n                        if (cin.fail()) {\n                            std::cin.clear();\n                            std::cin.ignore();\n                            throw std::runtime_error(\"Invalid input. Please enter an integer: \");\n                            continue;\n                        } else if (width < 10) {\n                            cout << \"Input is too small. Try again: \";\n                            continue;\n                        } else{\n                            break;\n                        }\n                        \n                    } catch (...) {\n                        std::cin.clear();\n                        std::cin.ignore();\n                    }\n                }\n                std::cout << \"\\nPlease input the size of the height for the map: \";\n                for (;;) {\n                    try {\n                        std::cin >> height;\n                        if (cin.fail()) {\n                            std::cin.clear();\n                            std::cin.ignore();\n                            throw std::runtime_error(\"Invalid input. Please enter an integer: \");\n                            continue;\n                        } else if (height < 10) {\n                            cout << \"Input is too small. Try again: \";\n                            continue;\n                        } else{\n                            break;\n                        }\n                        \n                    } catch (...) {\n                        std::cin.clear();\n                        std::cin.ignore();\n                    }\n                }\n                cout << endl; \n                if(firstTime){\n                    MapCreator create(width,height);\n                    listOfMaps.push_back(create.returnMap());\n                    firstTime = false;\n                    width = 0; height = 0;\n                } else {\n                    vector<int> prevEnd; \n                    std::cout << listOfMaps.back()->endY;\n                    prevEnd.push_back(listOfMaps.back()->endY);\n                    prevEnd.push_back(listOfMaps.back()->endX);\n                    MapCreator create(width,height, prevEnd);\n                    listOfMaps.push_back(create.returnMap());\n                    width = 0; height = 0;\n                }\n                std::cout << \"Would you like to create another map? Type 1 for yes and 2 for no: \";\n                int anotherMapInput;\n                for (;;) {\n                    try {\n                        std::cin >> anotherMapInput;\n                        if (cin.fail()) {\n                            std::cin.clear();\n                            std::cin.ignore();\n                            throw std::runtime_error(\"Invalid input. Please enter an integer.\");\n                            continue;\n                        } else if (anotherMapInput != 1 && anotherMapInput != 2) {\n                            continue;\n                        } else{\n                            break;\n                        }\n                    } catch (...) {\n                        std::cin.clear();\n                        std::cin.ignore();\n                    }\n                }\n                if(anotherMapInput == 2){\n                    keepMakingMaps = false;\n                    break;\n                }\n            }\n        \n        }\n\n    }\n}\n\nvoid fillEmptyChestsWithItems(Map * currMap){\n\n    for(int i = 0; i < currMap->height; i++){\n        for(int j = 0; j < currMap->width; j++){\n            if(currMap->map.at(i).at(j)->state->letter == 'C'){\n                TreasureChest * currChest = dynamic_cast<TreasureChest *>(currMap->map.at(i).at(j)->state);\n\n            }\n\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GameUI.cpp b/GameUI.cpp
--- a/GameUI.cpp	(revision 98a8f226fe8d0c0d3240e49a91ff6381cbd7e89f)
+++ b/GameUI.cpp	(date 1712422747771)
@@ -1267,5 +1267,4 @@
 
         }
     }
-
 }
\ No newline at end of file
